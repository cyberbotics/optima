/**
 * MaxFile name: BackwardProp
 * Summary:
 *     Manager for the Back propagation of 2 layer network.
 *   All IO is between the CPU and the DFE.
 */

package backward;

import utils.TransposeDotProductKernel;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
//import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
//import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFETypeFactory;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
//import com.maxeler.maxcompiler.v2.managers.custom.blocks.Fanout;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
//import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceMath;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.platform.max5.manager.MAX5CManager;
import com.maxeler.platform.max5.manager.BuildConfig;
import com.maxeler.platform.max5.manager.BuildConfig.Effort;


public class BackwardPropMAX5CManager extends MAX5CManager {

	 private final CPUTypes cpuT = CPUTypes.FLOAT;
	 private final String KERNEL_TRANSPOSE = "TRANSPOSE_KERNEL";
	 private final String KERNEL_BLINEARLAYERO = "BLINEARLAYERO_KERNEL";
	 private final String KERNEL_BLINEARLAYERH = "BLINEARLAYERH_KERNEL";
	 
	 public BackwardPropMAX5CManager(EngineParameters params) {
		super(params);
		//setHasStreamStatus(true);
		getCurrentKernelConfig().debug.setEnableLatencyAnnotation(true);
		setAllowNonMultipleTransitions(true);
		
		Kernel kernel1 = new BLinearLayerOKernel(makeKernelParameters(KERNEL_BLINEARLAYERO));
		KernelBlock kernelBlock1 = addKernel(kernel1);
		Kernel kernel2 = new TransposeDotProductKernel(makeKernelParameters(KERNEL_TRANSPOSE));
		KernelBlock kernelBlock2 = addKernel(kernel2);
		Kernel kernel3 = new BLinearLayerHKernel(makeKernelParameters(KERNEL_BLINEARLAYERH));
		KernelBlock kernelBlock3 = addKernel(kernel3);
		
		kernelBlock1.getInput(BLinearLayerOKernel.X_NAME) <== addStreamFromCPU("x2");
		kernelBlock1.getInput(BLinearLayerOKernel.XPREV_NAME) <== addStreamFromCPU("x1");
		kernelBlock1.getInput(BLinearLayerOKernel.S_NAME) <== addStreamFromCPU("s2");
		kernelBlock1.getInput(BLinearLayerOKernel.TARGET_NAME) <== addStreamFromCPU("target");
		addStreamToCPU("db2") <== kernelBlock1.getOutput(BLinearLayerOKernel.DB_NAME);
		addStreamToCPU("dw2") <== kernelBlock1.getOutput(BLinearLayerOKernel.DW_NAME);
		
		kernelBlock2.getInput(TransposeDotProductKernel.DS_NAME) <== kernelBlock1.getOutput(BLinearLayerOKernel.DS_NAME);
		kernelBlock2.getInput(TransposeDotProductKernel.W_NAME) <== addStreamFromCPU("w2");
		
		kernelBlock3.getInput(BLinearLayerHKernel.X_NAME) <== kernelBlock2.getOutput(TransposeDotProductKernel.X_NAME);
		kernelBlock3.getInput(BLinearLayerHKernel.S_NAME) <== addStreamFromCPU("s1");
		kernelBlock3.getInput(BLinearLayerHKernel.XPREV_NAME) <== addStreamFromCPU("x0");
		//Fanout blockds = fanout("blockds");
		//blockds.getInput() <== kernelBlock3.getOutput(BLinearLayerHKernel.DS_NAME); 
		//addStreamToCPU("dso") <== blockds.addOutput("ds");
		addStreamToCPU("dso") <== kernelBlock3.getOutput(BLinearLayerHKernel.DS_NAME);
		addStreamToCPU("db1") <== kernelBlock3.getOutput(BLinearLayerHKernel.DB_NAME);
		addStreamToCPU("dw1") <== kernelBlock3.getOutput(BLinearLayerHKernel.DW_NAME);
	 }
	
	 public EngineInterface interfaceDefault() {
		 EngineInterface ei = new EngineInterface();

		 InterfaceParam BS = ei.addParam("BS", CPUTypes.INT64);  // batch size
		 InterfaceParam LS0 = ei.addParam("LS0", CPUTypes.INT64);  // input size
		 InterfaceParam LS1 = ei.addParam("LS1", CPUTypes.INT64);  // hidden layer size
		 InterfaceParam LS2 = ei.addParam("LS2", CPUTypes.INT64);  // output layer size
		 InterfaceParam L1 = ei.getAutoLoopOffset(KERNEL_BLINEARLAYERO, BLinearLayerOKernel.OFFSET); // automatic offset
		 InterfaceParam L2 = ei.getAutoLoopOffset(KERNEL_TRANSPOSE, TransposeDotProductKernel.OFFSET); // automatic offset
		 InterfaceParam L3 = ei.getAutoLoopOffset(KERNEL_BLINEARLAYERH, BLinearLayerHKernel.OFFSET); // automatic offset
		 
		 ei.setTicks(KERNEL_BLINEARLAYERO, LS1 * LS2 * L1 * BS);
		 ei.setTicks(KERNEL_TRANSPOSE, LS1 * LS2 * L2 * BS);
		 ei.setTicks(KERNEL_BLINEARLAYERH, LS0 * LS1 * L3 * BS);
		 
		 ei.setStream("x2", cpuT, cpuT.sizeInBytes() * BS * LS2);
		 ei.setStream("target", cpuT, cpuT.sizeInBytes() * BS * LS2);
		 ei.setStream("s2", cpuT, cpuT.sizeInBytes() * BS * LS2);
		 ei.setStream("x1", cpuT, cpuT.sizeInBytes() * BS * LS1);
		 ei.setStream("db2", cpuT, cpuT.sizeInBytes() * LS2 * BS);
		 ei.setStream("dw2", cpuT, cpuT.sizeInBytes() * LS1 * LS2);
		 
		 ei.setStream("w2", cpuT, cpuT.sizeInBytes() * LS1 * LS2);
		 
		 ei.setStream("s1", cpuT, cpuT.sizeInBytes() * LS1 * BS);
		 ei.setStream("x0", cpuT, cpuT.sizeInBytes() * LS0 * BS);
		 //ei.setStream("dso", cpuT, cpuT.sizeInBytes() * LS1 * BS);
		 ei.setStream("db1", cpuT, cpuT.sizeInBytes() * LS1 * BS);
		 ei.setStream("dw1", cpuT, cpuT.sizeInBytes() * LS0 * LS1);
		 
		 ei.setScalar(KERNEL_BLINEARLAYERO, BLinearLayerOKernel.XSIZE_NAME, LS2);
		 ei.setScalar(KERNEL_BLINEARLAYERO, BLinearLayerOKernel.XPREVSIZE_NAME, LS1);
		 ei.setScalar(KERNEL_BLINEARLAYERO, BLinearLayerOKernel.BATCHSIZE_NAME, BS);
		 
		 ei.setScalar(KERNEL_TRANSPOSE, TransposeDotProductKernel.INSIZE_NAME, LS1);
		 ei.setScalar(KERNEL_TRANSPOSE, TransposeDotProductKernel.OUTSIZE_NAME, LS2);
		 ei.setScalar(KERNEL_TRANSPOSE, TransposeDotProductKernel.BATCHSIZE_NAME, BS);
		 
		 ei.setScalar(KERNEL_BLINEARLAYERH, BLinearLayerHKernel.XSIZE_NAME, LS1);
		 ei.setScalar(KERNEL_BLINEARLAYERH, BLinearLayerHKernel.XPREVSIZE_NAME, LS0);
		 ei.setScalar(KERNEL_BLINEARLAYERH, BLinearLayerHKernel.BATCHSIZE_NAME, BS);
		 
		 ei.ignoreAutoLoopOffset(KERNEL_BLINEARLAYERO, BLinearLayerOKernel.OFFSET);
		 ei.ignoreAutoLoopOffset(KERNEL_TRANSPOSE, TransposeDotProductKernel.OFFSET);
		 ei.ignoreAutoLoopOffset(KERNEL_BLINEARLAYERH, BLinearLayerHKernel.OFFSET);

		 return ei;
	 }
	

	 public static void main(String[] args) {
		EngineParameters params = new EngineParameters(args);
	    BackwardPropMAX5CManager mgr = new BackwardPropMAX5CManager(params);
	    mgr.createSLiCinterface(mgr.interfaceDefault());
	    
	    BuildConfig buildConfig = mgr.getBuildConfig();
	    buildConfig.setBuildEffort(Effort.HIGH);

	    mgr.build();
	}
}
